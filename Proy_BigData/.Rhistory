t1sep<-table(bd_sep$S1_01_1)
t1<-data.frame(t1sol,t1cas,t1sep)
library(dplyr)
t1<-t1 %>% select(Var1,Freq,Freq.1,Freq.2)
t1<-t1 %>% rename(Frecuencia=Var1,soltera=Freq,casada=Freq.1,separada=Freq.2)
t1
t1<-cbind(t1,apply(t1[,-1], 1, sum))
t1<-t1 %>% select(Frecuencia,5)
t1<-t1 %>% rename(tipo=Var1,freq=`apply(t1[, -1], 1, sum)`)
t1<-data.frame(t1sol,t1cas,t1sep)
library(dplyr)
t1<-t1 %>% select(Var1,Freq,Freq.1,Freq.2)
t1<-t1 %>% rename(Frecuencia=Var1,soltera=Freq,casada=Freq.1,separada=Freq.2)
t1
t1<-cbind(t1,apply(t1[,-1], 1, sum))
t1
t1<-t1 %>% select(Frecuencia,5)
t1<-t1 %>% rename(tipo=Var1,freq=`apply(t1[, -1], 1, sum)`)
t1<-t1 %>% rename(Var1=Frecuencia,freq=`apply(t1[, -1], 1, sum)`)
as.table(t1)
t1
rbind(bd_cas,bd_sep)
rbind(bd_cas$S1_01_1,bd_sep$S1_01_1)
table(rbind(bd_cas$S1_01_1,bd_sep$S1_01_1))
rbind(bd_cas[,c(1,7)],bd_sep[,c(1,7)])
t1<-rbind(bd_cas[,c(1,7)],bd_sep[,c(1,7)])
table(t1$S1_01_1)
t1<-rbind(bd_cas[,c(1,7)],bd_sep[,c(1,7)],bd_sol[,c(1,7)])
table(t1$S1_01_1)
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
# generate bins based on input$bins from ui.R
x    <- t1sol
runApp('plat_indicadores_vcm')
t1
table(t1)
t1
table(t1$S1_01_1)
t1<-table(t1$S1_01_1)
ind1<-list(t1,t1sol,t1cas,t1sep)
ind1
View(ind1)
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
getwd()
setwd("C:\\Users\\Dell\\Documents\\GitHub\\mi_proyecto1_est_383\\Proy_BigData\\bd_proy")
#guardando tipo lista
save(bd_cas2,file = "bd_cas2.RData")
save(bd_per2,file = "bd_per2.RData")
save(bd_sep2,file = "bd_sep2.RData")
save(bd_sol2,file = "bd_sol2.RData")
save(bd_viv2,file = "bd_viv2.RData")
shiny::runApp('plat_indicadores_vcm')
table(bd_sol$S1_01_1)
#######bd casadas
etiq<-attributes(bd_cas2)$variable.labels
etiq<- data.frame(etiq)
#exportando aexcel
#install.packages("writexl")
etiq$nom_var<- rownames(etiq)
etiq$etiquetas<-etiq$etiq
library(dplyr)
var_etiq<-etiq %>% select(nom_var,etiquetas)
rm(etiq)
library(writexl)
getwd()
setwd("C:\\Users\\Dell\\Documents\\GitHub\\mi_proyecto1_est_383\\doc_y_bd\\feminicidio\\bd")
write_xlsx(var_etiq,"etiquetas de las variables casadas.xlsx")
###bd separadas
etiq<-attributes(bd_sep2)$variable.labels
etiq<- data.frame(etiq)
#exportando aexcel
#install.packages("writexl")
etiq$nom_var<- rownames(etiq)
etiq$etiquetas<-etiq$etiq
library(dplyr)
var_etiq<-etiq %>% select(nom_var,etiquetas)
rm(etiq)
library(writexl)
getwd()
setwd("C:\\Users\\Dell\\Documents\\GitHub\\mi_proyecto1_est_383\\doc_y_bd\\feminicidio\\bd")
write_xlsx(var_etiq,"etiquetas de las variables separadas.xlsx")
###bd persona
etiq<-attributes(bd_sep2)$variable.labels
etiq<- data.frame(etiq)
#exportando aexcel
#install.packages("writexl")
etiq$nom_var<- rownames(etiq)
etiq$etiquetas<-etiq$etiq
###bd persona
etiq<-attributes(bd_per2)$variable.labels
etiq<- data.frame(etiq)
#exportando aexcel
#install.packages("writexl")
etiq$nom_var<- rownames(etiq)
etiq$etiquetas<-etiq$etiq
library(dplyr)
var_etiq<-etiq %>% select(nom_var,etiquetas)
rm(etiq)
library(writexl)
getwd()
setwd("C:\\Users\\Dell\\Documents\\GitHub\\mi_proyecto1_est_383\\doc_y_bd\\feminicidio\\bd")
write_xlsx(var_etiq,"etiquetas de las variables persona.xlsx")
###bd vivienda
etiq<-attributes(bd_viv2)$variable.labels
etiq<- data.frame(etiq)
#exportando aexcel
#install.packages("writexl")
etiq$nom_var<- rownames(etiq)
etiq$etiquetas<-etiq$etiq
library(dplyr)
var_etiq<-etiq %>% select(nom_var,etiquetas)
rm(etiq)
library(writexl)
getwd()
setwd("C:\\Users\\Dell\\Documents\\GitHub\\mi_proyecto1_est_383\\doc_y_bd\\feminicidio\\bd")
write_xlsx(var_etiq,"etiquetas de las variables vivienda.xlsx")
shiny::runApp('plat_indicadores_vcm')
#desde CRAN
install.packages("rvest")
rm(bd_cas2)
rm(bd_sep2)
rm(bd_per2)
rm(bd_sol2)
rm(bd_viv2)
shiny::runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
source('C:/Users/Dell/Desktop/expEstadistica2.R')
text(a,1,labels=c("0.3","0.4","0.5","0.6","0.7","0.8","0.9"))
n<-(z*sqrt(p*(1-p))/e)**2
z<-qnorm(0.90)
e<-0.04
p<-c(0.3,0.4,0.5,0.6,0.7,0.8,0.9)
p
n<-(z*sqrt(p*(1-p))/e)**2
a<-barplot(n)
text(a,1,labels=c("0.3","0.4","0.5","0.6","0.7","0.8","0.9"))
source('C:/Users/Dell/Desktop/expEstadistica2.R')
shiny::runApp('plat_indicadores_vcm')
View(ind1)
View(ind1)
View(ind1)
runApp('plat_indicadores_vcm')
barplot(prop.table(table(ind2$S1_11_1)))
#uniendo las bases
ind2<-rbind(sol2,cas2,sep2)
sol2<-bd_sol %>% select(4,5,69,seq(70,90,4))
library(dplyr)
t1sol<-table(bd_sol$S1_01_1)
t1cas<-table(bd_cas$S1_01_1)
t1sep<-table(bd_sep$S1_01_1)
t1<-rbind(bd_cas[,c(1,7)],bd_sep[,c(1,7)],bd_sol[,c(1,7)])
t1<-table(t1$S1_01_1)
ind1<-list(t1,t1sol,t1cas,t1sep)
sol2<-bd_sol %>% select(4,5,69,seq(70,90,4))
cas2<-bd_cas %>% select(4,5,69,seq(70,90,4))
sep2<-bd_cas %>% select(4,5,69,seq(70,90,4))
# incluyebdo la variable soltera
sol2<-sol2 %>% mutate(tipo=rep("soltera"))
cas2<-cas2 %>% mutate(tipo=rep("casada"))
sep2<-sep2 %>% mutate(tipo=rep("separada"))
#uniendo las bases
ind2<-rbind(sol2,cas2,sep2)
ind2<-ind2 %>% filter(S1_10=="1. SI")
barplot(prop.table(table(ind2$S1_11_1)))
library(ggplot2)
ind2$S1_11_1 %>% table()
ind2$S1_11_1 %>% prop.table()
ind2$S1_11_1 %>% table() %>% prop.table()
ind2$S1_11_1 %>% table() %>% prop.table() %>% barplot()
ind2$S1_11_1 %>% table() %>% prop.table() %>% barplot()
ggplot(ind2,aes(x=S1_11_1))+geom_bar()
#ind2$S1_11_1 %>% table() %>% prop.table() %>% barplot()
apply(ind2,1,sum)
str(ind2$S1_11_1)
attributes(ind2$S1_11_1)
str(ind2$S1_11_1)$levels
aux<-str(ind2$S1_11_1)$levels
aux
str(ind2$S1_11_1)$levels
str(ind2$S1_11_1)$levels:
?str
require(stats); require(grDevices); require(graphics)
## The following examples show some of 'str' capabilities
str(1:12)
str(ls)
str(args) #- more useful than  args(args) !
str(freeny)
str(str)
str(.Machine, digits.d = 20) # extra digits for identification of binary numbers
str( lsfit(1:9, 1:9))
str( lsfit(1:9, 1:9), max.level = 1)
str( lsfit(1:9, 1:9), width = 60, strict.width = "cut")
str( lsfit(1:9, 1:9), width = 60, strict.width = "wrap")
op <- options(); str(op)   # save first;
# otherwise internal options() is used.
need.dev <-
!exists(".Device") || is.null(.Device) || .Device == "null device"
{ if(need.dev) postscript()
str(par())
if(need.dev) graphics.off()
}
ch <- letters[1:12]; is.na(ch) <- 3:5
str(ch) # character NA's
str(list(a = "A", L = as.list(1:100)), list.len = 9)
## Long strings,   'nchar.max'; 'strict.width' :
nchar(longch <- paste(rep(letters,100), collapse = ""))
str(longch)
str(longch, nchar.max = 52)
str(longch, strict.width = "wrap")
## Multibyte characters in strings (in multibyte locales):
oloc <- Sys.getlocale("LC_CTYPE")
mbyte.lc <- if(.Platform$OS.type == "windows")
"English_United States.28605" else "en_GB.UTF-8"
try(Sys.setlocale("LC_CTYPE", mbyte.lc))
## Truncation behavior (<-> correct width measurement) for "long" non-ASCII:
idx <- c(65313:65338, 65345:65350)
fwch <- intToUtf8(idx) # full width character string: each has width 2
ch <- strtrim(paste(LETTERS, collapse="._"), 64)
(ncc <- c(c.ch = nchar(ch),   w.ch = nchar(ch,   "w"),
c.fw = nchar(fwch), w.fw = nchar(fwch, "w")))
stopifnot(unname(ncc) == c(64,64, 32, 64))
## nchar.max: 1st line needs an increase of  2  in order to see  1  (in UTF-8!):
invisible(lapply(60:66, function(N) str(fwch, nchar.max = N)))
invisible(lapply(60:66, function(N) str( ch , nchar.max = N))) # "1 is 1" here
## revert locale to previous:
Sys.setlocale("LC_CTYPE", oloc)
## Settings for narrow transcript :
op <- options(width = 60,
str = strOptions(strict.width = "wrap"))
str(lsfit(1:9,1:9))
str(options())
## reset to previous:
options(op)
str(quote( { A+B; list(C, D) } ))
## S4 classes :
require(stats4)
x <- 0:10; y <- c(26, 17, 13, 12, 20, 5, 9, 8, 5, 4, 8)
ll <- function(ymax = 15, xh = 6)
-sum(dpois(y, lambda=ymax/(1+x/xh), log=TRUE))
fit <- mle(ll)
str(fit)
[Package utils version
ggplot(ind2,aes(x=S1_11_1))+geom_bar()
barplot(prop.table(table(ind2$S1_11_1)))
ggplot(ind2,aes(x=S1_11_1))+geom_bar()+ylab(c("0.1","0.5"))
ggplot(ind2,aes(x=S1_11_1))+geom_bar()
attributes(ggplot(ind2,aes(x=S1_11_1))+geom_bar)
barplot(prop.table(table(ind2$S1_11_1)))
ggplot(ind2,aes(x=S1_11_1))+table()
t1_2<-barplot(prop.table(table(ind2$S1_11_1)))
t1_2<-prop.table(table(ind2$S1_11_1))
ggplot(t1_2)+geom_bar
barplot(prop.table(table(ind2$S1_11_1)))
library(shiny)
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
shiny::runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
levels(bd_sol$S1_21A_1)
runApp('plat_indicadores_vcm')
runApp()
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
View(bd_cas)
runApp('plat_indicadores_vcm')
sol3<-bd_sol %>% select(4,5,69,seq(135,159,4))
cas3<-bd_cas %>% select(4,5,69,seq(135,159,4))
sep3<-bd_cas %>% select(4,5,69,seq(135,159,4))
sol3<-sol3 %>% mutate(tipo=rep("soltera"))
cas3<-cas3 %>% mutate(tipo=rep("casada"))
sep3<-sep3 %>% mutate(tipo=rep("separada"))
ind3<-rbind(sol3,cas3,sep3)
na.omit(ind3)
ind3<-na.omit(ind3)
ind3<-rbind(sol3,cas3,sep3)
View(ind3)
sol3<-bd_sol %>% select(133,seq(135,159,4))
cas3<-bd_cas %>% select(133,seq(135,159,4))
sep3<-bd_cas %>% select(133,seq(135,159,4))
sol3<-sol3 %>% mutate(tipo=rep("soltera"))
cas3<-cas3 %>% mutate(tipo=rep("casada"))
sep3<-sep3 %>% mutate(tipo=rep("separada"))
ind3<-rbind(sol3,cas3,sep3)
View(ind3)
prop.table(table(ind3$S1_21A_1))
table(ind3$S1_21A_1)
prop.table(table(ind3$S1_21A_1))
barplot(prop.table(table(ind3$S1_21A_1)))
levels(ind3$S1_21A_1)
levels(ind3$S1_21_1)
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
shiny::runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
library(ggplot2)
ggplot(ind3,aes(x=S1_21A_1))+table()
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
ind3<-ind3 %>% filter(S1_20=="	1. Si")
ind3<-rbind(sol3,cas3,sep3)
ind3<-ind3 %>% filter(S1_20=="	1. Si")
ind3<-rbind(sol3,cas3,sep3)
ind3<-ind3 %>% filter(S1_20=="1. Si")
?table
prop.table(table(ind3$S1_21A_1,title("hola")))
prop.table(table(ind3$S1_21A_1,title("violencia")))
prop.table(table(ind3$S1_21A_1)
prop.table(table(ind3$S1_21A_1))
runApp('plat_indicadores_vcm')
prop.table(table(ind3$S1_21A_1))
prop.table(table(ind3$S1_21A_1))
runApp('plat_indicadores_vcm')
names(prop.table(table(ind3$S1_21A_1)))
levels(prop.table(table(ind3$S1_21A_1)))
attributes(prop.table(table(ind3$S1_21A_1)))
attributes(prop.table(table(ind3$S1_21A_1)))$dimnames
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
\vspace{0.3cm}
\hrule
\vspace{0.3cm}
# PRIMER PARCIAL
rm(list=ls())
library(rvest)
library(dplyr)
covid<-read_html("https://www.worldometers.info/coronavirus/")
aux<-html_table(covid)
t<-aux[[1]]
names(t)[1]<-"id"
t<-t[!is.na(t$id),]
names(t)[11]<-"casoM"
names(t)[14]<-"testM"
names(t)[12]<-"muerteM"
names(t)[7]<-"recup"
t$casoM<-as.numeric(gsub(",","",t$casoM))
t$testM<-as.numeric(gsub(",","",t$testM))
t$muerteM<-as.numeric(gsub(",","",t$muerteM))
t$recup<-as.numeric(gsub(",","",t$recup))
t <- t %>% filter(16 !="")
#casos
tt1<-t %>% mutate(nn=1) %>% arrange(desc(casoM)) %>% group_by(Continent)  %>% mutate(nn=cumsum(nn)) %>% filter(nn<=5) %>% select(`Country,Other`,casoM,nn)
tt1<-tt1 %>% arrange(Continent)
knitr::kable(tt1,caption = "Top 5 casos por Millon por país y continente")
#test
tt2<-t %>% mutate(nn=1) %>% arrange(desc(testM)) %>% group_by(Continent)  %>% mutate(nn=cumsum(nn)) %>% filter(nn<=5) %>% select(`Country,Other`,testM,nn)
tt2<-tt2 %>% arrange(Continent)
knitr::kable(tt2,caption = "Top 5 test por Millon por país y continente")
library(ggplot2)
#Casos por millón vs Test por millón
ggplot(t,aes(casoM,testM,label=`Country,Other`))+geom_text(size=2)+facet_wrap(~Continent)
#Muertes por millón vs logaritmo de los recuperados
ggplot(t,aes(muerteM,log(recup),label=`Country,Other`))+geom_text(size=2)+facet_wrap(~Continent)
library(ggplot2)
#Casos por millón vs Test por millón
ggplot(t,aes(casoM,testM,label=`Country,Other`))+geom_text(size=2)+facet_wrap(~Continent)
#Muertes por millón vs logaritmo de los recuperados
ggplot(t,aes(muerteM,log(recup),label=`Country,Other`))+geom_text(size=2)+facet_wrap(~Continent)
load("C:\\Users\\ALVARO\\Documents\\GitHub\\EST-383\\data\\endsa.RData")
ldep<-unique(endsa$depto)
lyear<-unique(endsa$year)
inputPanel(
selectInput("dep", label = "Departamento:",
choices = ldep, selected = 1),
selectInput("year", label = "Periodo:",
choices = lyear, selected = 1)
)
load("C:\\Users\\ALVARO\\Documents\\GitHub\\EST-383\\data\\endsa.RData")
knitr::kable(tt1,caption = "Top 5 casos por Millon por país y continente")
shiny::runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
sol3<-bd_sol %>% select(133,seq(135,159,4))
cas3<-bd_cas %>% select(133,seq(135,159,4))
sep3<-bd_cas %>% select(133,seq(135,159,4))
sol3<-sol3 %>% mutate(tipo=rep("soltera"))
cas3<-cas3 %>% mutate(tipo=rep("casada"))
sep3<-sep3 %>% mutate(tipo=rep("separada"))
ind3<-rbind(sol3,cas3,sep3)
ind3<-ind3 %>% filter(S1_20=="1. Si")
#barplot(prop.table(table(ind3$S1_21A_1)))
t1<-ind3 %>% select(S1_21A_1,S1_21A_2)
View(t1)
t2<-ind3 %>% select(S1_21A_3)
t4<-ind3 %>% select(S1_21A_5,S1_21A_6,S1_21A_7)
#barplot(prop.table(table(ind3$S1_21A_1)))
t1<-ind3 %>% select(S1_21A_1,S1_21A_2)
t2<-ind3 %>% select(S1_21A_3)
t3<-ind3 %>% select(S1_21A_4)
t4<-ind3 %>% select(S1_21A_5,S1_21A_6,S1_21A_7)
ind3<-list(t1,t2,t3,t4)
ind3[[1]]
table(ind3[[1]])
attributes(ind3[[1]])
ind3[[1]]$S1_21A_1
table(ind3[[1]]$S1_21A_1)
dim(ind3[[1]]$S1_21A_1)
dimnames(ind3[[1]]$S1_21A_1)
attributes(ind3[[1]]$S1_21A_1)
attributes(ind3[[1]])
dim(ind3[[1]])
dim(ind3[[1]])[2]
ind3[[1]][,1]
ind3[[4]][,1]
ind3[[4]][,2]
runApp('plat_indicadores_vcm')
prop.table(table(x3[[1]][,1]))
prop.table(table(ind3[[1]][,1]))
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
library(dplyr)
t1sol<-table(bd_sol$S1_01_1)
t1cas<-table(bd_cas$S1_01_1)
t1sep<-table(bd_sep$S1_01_1)
t1<-rbind(bd_cas[,c(1,7)],bd_sep[,c(1,7)],bd_sol[,c(1,7)])
t1<-table(t1$S1_01_1)
ind1<-list(t1,t1sol,t1cas,t1sep)
>
>
sol2<-bd_sol %>% select(4,5,69,seq(70,90,4))
cas2<-bd_cas %>% select(4,5,69,seq(70,90,4))
sep2<-bd_cas %>% select(4,5,69,seq(70,90,4))
# incluyebdo la variable soltera
sol2<-sol2 %>% mutate(tipo=rep("soltera"))
cas2<-cas2 %>% mutate(tipo=rep("casada"))
sep2<-sep2 %>% mutate(tipo=rep("separada"))
#uniendo las bases
ind2<-rbind(sol2,cas2,sep2)
ind2<-ind2 %>% filter(S1_10=="1. SI")
barplot(prop.table(table(ind2$S1_11_1)))
sol3<-bd_sol %>% select(133,seq(135,159,4))
cas3<-bd_cas %>% select(133,seq(135,159,4))
sep3<-bd_cas %>% select(133,seq(135,159,4))
sol3<-sol3 %>% mutate(tipo=rep("soltera"))
cas3<-cas3 %>% mutate(tipo=rep("casada"))
sep3<-sep3 %>% mutate(tipo=rep("separada"))
ind3<-rbind(sol3,cas3,sep3)
ind3<-ind3 %>% filter(S1_20=="1. Si")
#barplot(prop.table(table(ind3$S1_21A_1)))
t1<-ind3 %>% select(S1_21A_1,S1_21A_2)
library(dplyr)
t1sol<-table(bd_sol$S1_01_1)
t1cas<-table(bd_cas$S1_01_1)
t1sep<-table(bd_sep$S1_01_1)
t1<-rbind(bd_cas[,c(1,7)],bd_sep[,c(1,7)],bd_sol[,c(1,7)])
t1<-table(t1$S1_01_1)
ind1<-list(t1,t1sol,t1cas,t1sep)
#barplot(prop.table(table(ind3$S1_21A_1)))
t1_3<-ind3 %>% select(S1_21A_1,S1_21A_2)
t2_3<-ind3 %>% select(S1_21A_3)
t3_3<-ind3 %>% select(S1_21A_4)
t4_3<-ind3 %>% select(S1_21A_5,S1_21A_6,S1_21A_7)
ind3<-list(t1,t2,t3,t4)
ind3<-list(t1_3,t2_3,t3_3,t4_3)
runApp('plat_indicadores_vcm')
shiny::runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
runApp('plat_indicadores_vcm')
install.packages('rsconnect')
install.packages("rsconnect")
library(rsconnect)
